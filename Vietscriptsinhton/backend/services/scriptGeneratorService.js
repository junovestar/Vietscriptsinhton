import { GeminiService } from './geminiService.js'

/**
 * Script Generator Service - equivalent to Basic LLM Chain
 */
export class ScriptGeneratorService {
  
  /**
   * Generate final script from transcript - mirrors Basic LLM Chain functionality
   */
  async generateScript(transcript, settings) {
    console.log('üé≠ Generating script with settings:', {
      wordCount: settings.wordCount,
      writingStyle: settings.writingStyle,
      mainCharacter: settings.mainCharacter,
      language: settings.language,
      creativity: settings.creativity
    })
    
    try {
      // Build the prompt with user settings
      const customizedPrompt = this.buildPrompt(settings)
      
      // Use Gemini service to generate script
      const geminiService = new GeminiService(settings.apiKey)
      const script = await geminiService.generateScript(transcript, customizedPrompt)
      
      console.log('‚úÖ Script generated successfully')
      return script
      
    } catch (error) {
      console.error('‚ùå Error generating script:', error)
      throw new Error(`Failed to generate script: ${error.message}`)
    }
  }
  
  /**
   * Build customized prompt based on user settings
   */
  buildPrompt(settings) {
    let prompt = settings.prompt
    
    // Replace placeholders with actual settings
    prompt = prompt.replace(/4500‚Äì5000 ch·ªØ/g, `${settings.wordCount} ch·ªØ`)
    
    // Add character customization
    if (settings.mainCharacter && settings.mainCharacter !== 'Th√°nh Nh·ªç R·ª´ng S√¢u') {
      prompt += `\n\nT√™n nh√¢n v·∫≠t ch√≠nh: ${settings.mainCharacter}`
    }
    
    // Add writing style
    if (settings.writingStyle !== 'H√†i h∆∞·ªõc') {
      prompt += `\n\nPhong c√°ch vi·∫øt: ${settings.writingStyle}`
    }
    
    // Add language preference
    if (settings.language !== 'Ti·∫øng Vi·ªát') {
      prompt += `\n\nNg√¥n ng·ªØ: ${settings.language}`
    }
    
    // Add creativity level instruction
    const creativityInstructions = this.getCreativityInstruction(settings.creativity)
    if (creativityInstructions) {
      prompt += `\n\n${creativityInstructions}`
    }
    
    return prompt
  }
  
  /**
   * Get creativity level instructions
   */
  getCreativityInstruction(level) {
    if (level <= 3) {
      return "Vi·∫øt theo c√°ch b·∫£o th·ªß, b√°m s√°t n·ªôi dung g·ªëc, √≠t s√°ng t·∫°o."
    } else if (level <= 6) {
      return "Vi·∫øt c√¢n b·∫±ng gi·ªØa b√°m s√°t n·ªôi dung v√† s√°ng t·∫°o."
    } else if (level <= 8) {
      return "Vi·∫øt s√°ng t·∫°o, th√™m nhi·ªÅu y·∫øu t·ªë h√†i h∆∞·ªõc v√† k·ªãch t√≠nh."
    } else {
      return "Vi·∫øt r·∫•t s√°ng t·∫°o, t·ªëi ƒëa h√≥a y·∫øu t·ªë gi·∫£i tr√≠ v√† b·∫•t ng·ªù."
    }
  }
}
